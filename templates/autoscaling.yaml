Parameters:
  AppName:
    Type: String
  
  EnvironmentName:
    Type: String
  
  EnvironmentId:
    Type: String

  VpcStackName:
    Type: String

  SqsStackName:
    Type: String

  SnsStackName:
    Type: String

  ECSStackName:
    Type: String

  MaxCapacity:
    Type: Number
    Default: "2"


Resources:
  AutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [application-autoscaling.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      Policies:
      - PolicyName: service-autoscaling
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "application-autoscaling:*"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:PutMetricAlarm"
              - "ecs:DescribeServices"
              - "ecs:UpdateService"
            Resource: "*"

  LambdaScalingRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [lambda.amazonaws.com]
          Action: ["sts:AssumeRole"]
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: lambda-scaling-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - "application-autoscaling:*"
              - "cloudwatch:DescribeAlarms"
              - "cloudwatch:PutMetricAlarm"
              - "ecs:DescribeServices"
              - "ecs:UpdateService"
            Resource: "*"

  EventBridgeLambdaInvokeRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: [events.amazonaws.com]
          Action: ["sts:AssumeRole"]   
      Path: /
      Policies:
      - PolicyName: lambda-scaling-policy
        PolicyDocument:
          Statement:
          - Effect: Allow
            Action:
              - lambda:InvokeFunction
            Resource: !GetAtt SetEcsServiceToZeroLambda.Arn

  AutoScalingTarget:
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MinCapacity: 0
      MaxCapacity: !Ref MaxCapacity
      ResourceId: !Join
        - "/"
        - - service
          - Fn::ImportValue: !Sub "${ECSStackName}-ecs-cluster-name"
          - Fn::ImportValue: !Sub "${ECSStackName}-ecs-service-name"
      RoleARN: !GetAtt AutoScalingRole.Arn
      ScalableDimension: "ecs:service:DesiredCount"
      ServiceNamespace: ecs

  PermissionForLambdaInvoke:
     Type: AWS::Lambda::Permission
     Properties:
       FunctionName: !Ref SetEcsServiceToZeroLambda
       Action: lambda:InvokeFunction
       Principal: events.amazonaws.com
       SourceArn: !GetAtt ScaleDownEventBridgeRule.Arn

  ECSScaleUpPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PolicyUp
      PolicyType: StepScaling
      ScalingTargetId: !Ref "AutoScalingTarget"
      StepScalingPolicyConfiguration:
        AdjustmentType: ChangeInCapacity
        Cooldown: 5
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalLowerBound: 0
            ScalingAdjustment: 1

  ECSScaleDownPolicy:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: PolicyDown
      PolicyType: StepScaling
      ScalingTargetId: !Ref "AutoScalingTarget"
      StepScalingPolicyConfiguration:
        AdjustmentType: ExactCapacity
        Cooldown: 5
        MetricAggregationType: Average
        StepAdjustments:
          - MetricIntervalUpperBound: 0
            ScalingAdjustment: 0

  SqsUpAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${AppName}-sqs-alarm-up"
      AlarmDescription: "Trigger scaling based on SQS queue"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible" #Check messages in queue
      ComparisonOperator: "GreaterThanOrEqualToThreshold"
      Dimensions:
        - Name: QueueName
          Value:
            Fn::ImportValue: !Sub "${SqsStackName}-queue-name"
      EvaluationPeriods: 1
      Period: 10
      Statistic: 'Sum'
      Threshold: 1
      AlarmActions:
        - !Ref "ECSScaleUpPolicy"

  SqsDownNotVisibleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${AppName}-sqs-visible-alarm-down"
      AlarmDescription: "Trigger scaling based on SQS queue"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesVisible" #Check messages in queue
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: QueueName
          Value:
            Fn::ImportValue: !Sub "${SqsStackName}-queue-name"
      EvaluationPeriods: 1
      Period: 10
      Statistic: 'Sum'
      Threshold: 1

  SqsDownVisibleAlarm:
    Type: "AWS::CloudWatch::Alarm"
    Properties:
      AlarmName: !Sub "${AppName}-sqs-notvisible-alarm-down"
      AlarmDescription: "Trigger scaling based on SQS queue"
      Namespace: "AWS/SQS"
      MetricName: "ApproximateNumberOfMessagesNotVisible" #Check messages in flight
      ComparisonOperator: "LessThanThreshold"
      Dimensions:
        - Name: QueueName
          Value:
            Fn::ImportValue: !Sub "${SqsStackName}-queue-name"
      EvaluationPeriods: 1
      Period: 10
      Statistic: 'Sum'
      Threshold: 1

  SqsDownComposite:
    Type: AWS::CloudWatch::CompositeAlarm
    Properties:
      AlarmName: !Sub "${AppName}-sqs-composite-down"
      AlarmRule: !Sub "(ALARM(${AppName}-sqs-notvisible-alarm-down) AND ALARM(${AppName}-sqs-visible-alarm-down))"

  ScaleDownEventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      RoleArn: !GetAtt EventBridgeLambdaInvokeRole.Arn
      EventPattern:
        source:
          - "aws.cloudwatch"
        detail-type:
          - "CloudWatch Alarm State Change"
        detail:
          alarmName:
            - !Sub "${AppName}-sqs-composite-down"
          previousState:
            value:
              - OK
          state:
            value:
              - ALARM
      Targets:
        - Arn:
            !GetAtt SetEcsServiceToZeroLambda.Arn
          Id: !Sub "${AppName}-${EnvironmentName}-${EnvironmentId}-lambda"
          RetryPolicy:
            MaximumRetryAttempts: 1
            MaximumEventAgeInSeconds: 4000

  SetEcsServiceToZeroLambda:
    Type: AWS::Lambda::Function
    Properties:
      Runtime: python3.9
      Role: !GetAtt LambdaScalingRole.Arn
      Handler: index.lambda_handler
      Environment:
        Variables:
          TARGET_CLUSTER:
            Fn::ImportValue: !Sub "${ECSStackName}-ecs-cluster-name"
          TARGET_SERVICE:
            Fn::ImportValue: !Sub "${ECSStackName}-ecs-service-name"
      Code:
        ZipFile: |
          import boto3
          import os

          AWS_REGION = os.environ['AWS_REGION']
          TARGET_CLUSTER = os.environ['TARGET_CLUSTER']
          TARGET_SERVICE = os.environ['TARGET_SERVICE']
          ecs = boto3.client('ecs', region_name=AWS_REGION)

          def lambda_handler(event, context):
            ecs.update_service(
              cluster=TARGET_CLUSTER,
              service=TARGET_SERVICE,
              desiredCount=0
            )
