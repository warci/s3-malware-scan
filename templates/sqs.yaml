Parameters:
  AppName:
    Type: String
  
  EnvironmentName:
    Type: String
  
  EnvironmentId:
    Type: String

  S3StackName:
    Type: String

  SNSStackName:
    Type: String

Resources:
  QueuePolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: sqs.SendMessage
            Resource: !GetAtt SQSQueue.Arn
            Condition:
              ArnEquals:
                aws:SourceArn:
                  !GetAtt EventBridgeRule.Arn
      Queues:
        - !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${AppName}-${EnvironmentName}-${EnvironmentId}
        - !Sub https://sqs.${AWS::Region}.amazonaws.com/${AWS::AccountId}/${AppName}-dlq-${EnvironmentName}-${EnvironmentId}

  SQSQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-${EnvironmentName}-${EnvironmentId}"
      #SqsManagedSseEnabled: True
      KmsMasterKeyId: !Ref SQSKmsKey
      KmsDataKeyReusePeriodSeconds: 43200 
      VisibilityTimeout: 1200
  
  SQSDLQueue:
    Type: AWS::SQS::Queue
    Properties:
      QueueName: !Sub "${AppName}-dlq-${EnvironmentName}-${EnvironmentId}"
      #SqsManagedSseEnabled: True
      KmsMasterKeyId: Ref SQSKmsKey
      KmsDataKeyReusePeriodSeconds: 43200
      MessageRetentionPeriod: 1209600

  SQSKmsKey:
    Type: AWS::KMS::Key
    Properties:
      Description: !Sub "${AppName}-sqs-key"
      KeyPolicy:
        Version: "2012-10-17"
        Statement:
          - Sid: Allow EventBridge access
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action:
              - kms:GenerateDataKey
              - kms:Decrypt
            Resource: '*'

          - Sid: Allow access for Key Administrators
            Effect: Allow
            Principal:
              AWS:
                - !Sub arn:aws:iam::${AWS::AccountId}:root
            Action:
              - kms:*
            Resource: '*'

  DLQAlarm:
      Type: AWS::CloudWatch::Alarm
      Properties:
          AlarmName: !Sub ${AppName}-dlq-alarm
          AlarmDescription: 'There are files that have failed malware scanning.'
          Namespace: AWS/SQS
          MetricName: ApproximateNumberOfMessagesVisible
          Dimensions:
              -   Name: QueueName
                  Value: !GetAtt SQSDLQueue.QueueName
          Statistic: Sum
          Period: 60
          EvaluationPeriods: 1
          Threshold: 0
          ComparisonOperator: GreaterThanThreshold
          AlarmActions:
              - Fn::ImportValue: !Sub "${SNSStackName}-sns-topic-arn"

  EventBridgeRule:
    Type: AWS::Events::Rule
    Properties:
      State: ENABLED
      RoleArn: !GetAtt RuleRole.Arn
      EventPattern:
        source:
          - "aws.s3"
        detail-type:
          - "Object Created"
        detail:
          bucket:
            name:
              - Fn::ImportValue: !Sub "${S3StackName}-s3-incoming-bucket-name"
      Targets:
        - Arn:
            !GetAtt SQSQueue.Arn
          Id: !Sub "${AppName}-${EnvironmentName}-${EnvironmentId}"
          RetryPolicy:
            MaximumRetryAttempts: 4
            MaximumEventAgeInSeconds: 4000
          DeadLetterConfig:
            Arn:
              !GetAtt SQSDLQueue.Arn

  RuleRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Action: 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: KmsDecrypt
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "kms:Decrypt"
                  - "kms:GenerateDataKey"
                Resource: "*"
        - PolicyName: sqs
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - "sqs:SendMessage"
                  - "sqs:ReceiveMessage"
                Resource: "*"


Outputs:
  SQSQueue:
    Description: input scan queue
    Value: !GetAtt SQSQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-queue-arn"

  SQSQueueUrl:
    Description: input scan queue url
    Value: !Ref SQSQueue
    Export:
      Name: !Sub "${AWS::StackName}-queue-url"

  SQSQueueName:
    Description: input scan queue name
    Value: !Sub "${AppName}-${EnvironmentName}-${EnvironmentId}"
    Export:
      Name: !Sub "${AWS::StackName}-queue-name"

  SQSDLQueue:
    Description: input deadletter queue
    Value: !GetAtt SQSDLQueue.Arn
    Export:
      Name: !Sub "${AWS::StackName}-dl-queue-arn"

