import os
from unittest import TestCase, mock, TestLoader
from moto import mock_sns, mock_sqs, mock_cloudwatch
from moto.core import DEFAULT_ACCOUNT_ID
from moto.sns import sns_backends
TestLoader.sortTestMethodsUsing = None
from time import sleep
from datetime import datetime, timedelta

mock_env_vars = {
    "MALWARE_SCAN_QUEUE_URL": f"https://sqs.eu-west-1.amazonaws.com/{DEFAULT_ACCOUNT_ID}/malware-mock-001",
    "ENVIRONMENT_NAME": "mock",
    "ENVIRONMENT_ID": "001",
    "SNS_TOPIC_NAME": "mock-001-malware-SNSTopic",
    "SNS_TOPIC_ARN": f"arn:aws:sns:eu-west-1:{DEFAULT_ACCOUNT_ID}:mock-001-malware-SNSTopic",
    "CLEAN_BUCKET": "123456789012-malware-clean-mock-001",
    "QUARANTINE_BUCKET": "123456789012-malware-quarantine-mock-001",
    "DEBUG": "1",
    'AWS_ACCESS_KEY_ID': 'testing',
    'AWS_SECRET_ACCESS_KEY': 'testing',
    'AWS_SESSION_TOKEN': 'testing',
    'AWS_SECURITY_TOKEN': 'testing',
    'AWS_REGION': 'eu-west-1',
    'AWS_DEFAULT_REGION': 'eu-west-1',
    }

class All(TestCase):
    mock_sns = mock_sns()

    def setUp(self):
        self.env_patcher = mock.patch.dict(os.environ, mock_env_vars, clear=True)
        self.env_patcher.start()
        self.mock_sns.start()
        import boto3
        self.conn = boto3.client("sns", region_name=os.environ['AWS_REGION'])
        self.conn.create_topic(Name=os.environ['SNS_TOPIC_NAME'])
        self.response = self.conn.list_topics()
        self.topic_arn = self.response["Topics"][0]["TopicArn"]

    def tearDown(self):
        self.mock_sns.stop()
        self.env_patcher.stop()

    def test_all(self):
        from malware import MalwareScan
        malware_scan = MalwareScan()
        


if __name__ == '__main__':
    TestCase.main()