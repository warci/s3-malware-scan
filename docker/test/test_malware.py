import os
from unittest import TestCase, mock, TestLoader
from moto import mock_sns, mock_sqs, mock_cloudwatch
from moto.core import DEFAULT_ACCOUNT_ID
from moto.sns import sns_backends
TestLoader.sortTestMethodsUsing = None
from time import sleep
from datetime import datetime, timedelta

mock_env_vars = {
    "MALWARE_SCAN_QUEUE_URL": f"https://sqs.eu-west-1.amazonaws.com/{DEFAULT_ACCOUNT_ID}/malware-mock-001",
    "ENVIRONMENT_NAME": "mock",
    "ENVIRONMENT_ID": "001",
    "SNS_TOPIC_NAME": "mock-001-malware-SNSTopic",
    "SNS_TOPIC_ARN": f"arn:aws:sns:eu-west-1:{DEFAULT_ACCOUNT_ID}:mock-001-malware-SNSTopic",
    "CLEAN_BUCKET": "123456789012-malware-clean-mock-001",
    "QUARANTINE_BUCKET": "123456789012-malware-quarantine-mock-001",
    "DEBUG": "1",
    'AWS_ACCESS_KEY_ID': 'testing',
    'AWS_SECRET_ACCESS_KEY': 'testing',
    'AWS_SESSION_TOKEN': 'testing',
    'AWS_SECURITY_TOKEN': 'testing',
    'AWS_REGION': 'eu-west-1',
    'AWS_DEFAULT_REGION': 'eu-west-1',
    }

class TestSns(TestCase):
    mock_sns = mock_sns()

    def setUp(self):
        self.env_patcher = mock.patch.dict(os.environ, mock_env_vars, clear=True)
        self.env_patcher.start()
        self.mock_sns.start()
        import boto3
        self.conn = boto3.client("sns", region_name=os.environ['AWS_REGION'])
        self.conn.create_topic(Name=os.environ['SNS_TOPIC_NAME'])
        self.response = self.conn.list_topics()
        self.topic_arn = self.response["Topics"][0]["TopicArn"]

    def tearDown(self):
        self.mock_sns.stop()
        self.env_patcher.stop()

    def test_publish_sns(self):
        from malware import MalwareScan
        malware_scan = MalwareScan()
        subject = "Testing subject"
        message = "Test message body"
        malware_scan.publish_to_sns(subject, message)

class TestSqs(TestCase):
    mock_sqs = mock_sqs()

    def setUp(self):
        self.env_patcher = mock.patch.dict(os.environ, mock_env_vars, clear=True)
        self.env_patcher.start()
        self.mock_sqs.start()
        import boto3
        self.conn = boto3.client("sqs", region_name=os.environ['AWS_REGION'])
        self.queue_url = self.conn.create_queue(QueueName="mock")['QueueUrl']
    
    def tearDown(self):
        self.mock_sqs.stop()
        self.env_patcher.stop()

    def test_delete_message(self):
        from malware import MalwareScan
        malware_scan = MalwareScan()
        resp = self.conn.send_message(
            QueueUrl=self.queue_url,
            MessageBody='{"version":"0","id":"72f1af85-1f74-3e2b-606e-a363ba92081a","detail-type":"Object Created","source":"aws.s3","account":"123456789012","time":"2022-11-16T21:47:07Z","region":"eu-west-1","resources":["arn:aws:s3:::123456789012-malware-incoming-mock"],"detail":{"version":"0","bucket":{"name":"123456789012-malware-incoming-mock"},"object":{"key":"file_1","size":1,"etag":"93b885adfe0da089cdf634904fd59f71","sequencer":"0063755A5BB04A9C4D"},"request-id":"C7NR6NWFDVA98V4Q","requester":"746723430178","source-ip-address":"1.1.1.1","reason":"PutObject"}}'
        )
        self.messages = self.conn.receive_message(QueueUrl=self.queue_url).get('Messages', [])
        assert len(self.messages) == 1
        malware_scan.delete_message(self.queue_url, self.messages[0]['ReceiptHandle'])
        self.messages = self.conn.receive_message(QueueUrl=self.queue_url).get('Messages', [])
        assert len(self.messages) == 0

    def test_receive_messages(self):
        from malware import MalwareScan
        malware_scan = MalwareScan()
        self.conn.send_message(
            QueueUrl=self.queue_url,
            MessageBody='{"version":"0","id":"72f1af85-1f74-3e2b-606e-a363ba92081a","detail-type":"Object Created","source":"aws.s3","account":"123456789012","time":"2022-11-16T21:47:07Z","region":"eu-west-1","resources":["arn:aws:s3:::123456789012-malware-incoming-mock"],"detail":{"version":"0","bucket":{"name":"123456789012-malware-incoming-mock"},"object":{"key":"file_1","size":1,"etag":"93b885adfe0da089cdf634904fd59f71","sequencer":"0063755A5BB04A9C4D"},"request-id":"C7NR6NWFDVA98V4Q","requester":"746723430178","source-ip-address":"1.1.1.1","reason":"PutObject"}}'
        )
        resp = malware_scan.receive_messages(self.queue_url)
        assert len(resp) == 1

class TestScanning(TestCase):
    def setUp(self):
        self.env_patcher = mock.patch.dict(os.environ, mock_env_vars, clear=True)
        self.env_patcher.start()
        pass
    def tearDown(self):
        self.env_patcher.stop()
        pass
    def test_scan(self):
        from malware import MalwareScan
        pass

class TestCloudWatch(TestCase):
    mock_cw = mock_cloudwatch()
    def setUp(self):
        self.env_patcher = mock.patch.dict(os.environ, mock_env_vars, clear=True)
        self.env_patcher.start()
        self.mock_cw.start()
        import boto3
        self.conn = boto3.client("cloudwatch", region_name=os.environ['AWS_REGION'])

    def tearDown(self):
        self.mock_cw.stop()
        self.env_patcher.stop()
        
    def test_put_metric(self):
        from malware import MalwareScan
        namespace = 'test_namespace'
        name = 'test_name'
        value = 1
        unit = 'Count'
        malware_scan = MalwareScan()
        malware_scan.put_metric_data(namespace, name, value, unit)

        #TODO: check why we're getting an empty response
        resp = self.conn.get_metric_data(
            MetricDataQueries=[{
                'Id': 'test1',
                'MetricStat': {
                    'Metric': {
                        'Namespace': namespace,
                        'MetricName': name
                    },
                    'Period': 10,
                    'Stat': unit
                },
                'ReturnData': True
            }],
            StartTime=datetime.now() - timedelta(minutes=10),
            EndTime=datetime.now()
        )

if __name__ == '__main__':
    TestCase.main()